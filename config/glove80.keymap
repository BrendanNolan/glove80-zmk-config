/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm_brendan: hm_brendan {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_BRENDAN";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        tapkp_holdkp: tapkp_holdkp {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPKP_HOLDKP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        single_arrow: single_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "SINGLE_ARROW";
        };

        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "DOUBLE_ARROW";
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <41 42>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&sl 1          &magic 2 0       &sl 3             &none             &none                                                                                    &none                  &none             &none             &none                    &none
&none          &sl 4            &sl 4             &sl 4             &sl 4             &sl 4                                                       &kp SPACE  &kp SPACE              &kp SPACE         &kp SPACE         &kp SPACE                &none
&none          &kp Q            &hm_brendan 17 W  &hm_brendan 14 E  &hm_brendan 7 R   &kp T                                                       &kp Y      &tapkp_holdkp SPACE U  &hm_brendan 15 I  &hm_brendan 16 O  &kp P                    &none
&kp BACKSPACE  &hm_brendan 8 A  &hm_brendan 10 S  &hm_brendan 6 D   &hm_brendan 12 F  &kp G                                                       &kp H      &hm_brendan 13 J       &kp K             &kp L             &hm_brendan 5 SEMICOLON  &kp ENTER
&tog 0         &kp Z            &kp X             &hm_brendan 11 C  &kp V             &kp B  &none  &none  &none  &kp LGUI  &none      &none      &kp N      &kp M                  &kp COMMA         &kp DOT           &kp EQUAL                &none
&none          &none            &none             &none             &none                    &sl 4  &sl 4  &none  &none     &kp SPACE  &kp SPACE             &none                  &none             &none             &none                    &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        Symbols1 {
            bindings = <
&trans      &trans  &trans     &trans         &trans                                                                                    &trans         &trans        &trans        &trans         &trans
&trans      &trans  &trans     &trans         &trans         &trans                                                      &trans         &trans         &trans        &trans        &trans         &trans
&trans      &trans  &trans     &double_arrow  &single_arrow  &kp GRAVE                                                   &kp LS(TILDE)  &kp LS(UNDER)  &kp MINUS     &kp LS(DQT)   &kp SQT        &trans
&kp DELETE  &trans  &kp LC(B)  &kp BSLH       &kp FSLH       &kp LBKT                                                    &kp RBKT       &kp LS(LPAR)   &kp LS(RPAR)  &kp LS(LBRC)  &kp LS(RBRC)   &trans
&trans      &trans  &trans     &kp LS(LC(C))  &kp LS(LC(V))  &trans     &trans  &trans  &trans  &trans  &trans  &trans   &trans         &kp LS(AMPS)   &kp LS(STAR)  &kp LS(PIPE)  &kp LS(QMARK)  &trans
&trans      &trans  &trans     &trans         &trans                    &trans  &trans  &trans  &trans  &trans  &kp TAB                 &trans         &trans        &trans        &trans         &trans
            >;
        };

        Symbols2 {
            bindings = <
&trans  &trans        &trans      &trans         &trans                                                                               &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans      &trans         &trans        &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans      &kp LS(LT)     &kp LS(GT)    &kp LS(CARET)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans      &trans         &trans        &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans      &trans         &trans                       &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Digits {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp N0  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Fn {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans   &trans   &trans   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp F7   &kp F8   &kp F9   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp F4   &kp F5   &kp F6   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F1   &kp F2   &kp F3   &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans   &trans   &trans   &trans  &trans
            >;
        };

        Arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans         &trans       &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans    &trans         &trans       &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans       &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans            &trans         &trans       &trans     &trans  &trans
            >;
        };

        Shift {
            bindings = <
&trans  &trans     &trans     &trans     &trans                                                                           &trans     &trans      &trans      &trans         &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                     &trans     &trans     &trans      &trans      &trans         &trans
&trans  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)                                                  &kp LS(Y)  &kp LS(U)  &kp LS(I)   &kp LS(O)   &kp LS(P)      &trans
&trans  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)                                                  &kp LS(H)  &kp LS(J)  &kp LS(K)   &kp LS(L)   &kp LS(COLON)  &trans
&trans  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(N)  &kp LS(M)  &kp LS(LT)  &kp LS(GT)  &kp LS(PLUS)   &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans  &trans  &trans  &trans  &trans             &trans     &trans      &trans      &trans         &trans
            >;
        };

        Maestro {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Windows {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                      &trans      &trans      &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans      &trans      &trans      &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans      &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LG(N0)  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans              &trans      &trans      &trans      &trans  &trans
            >;
        };

        R_Half_Shift {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                     &trans     &trans      &trans      &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans     &trans     &trans      &trans      &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LS(Y)  &kp LS(U)  &kp LS(I)   &kp LS(O)   &kp LS(P)      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LS(H)  &kp LS(J)  &kp LS(K)   &kp LS(L)   &kp LS(COLON)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(N)  &kp LS(M)  &kp LS(LT)  &kp LS(GT)  &kp LS(PLUS)   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans             &trans     &trans      &trans      &trans         &trans
            >;
        };

        L_Half_Shift {
            bindings = <
&trans  &trans     &trans     &trans     &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        r_half_ctrl {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LC(Y)  &kp LC(U)  &kp LC(I)  &kp LC(O)  &kp LC(P)  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LC(H)  &kp LC(J)  &kp LC(K)  &kp LC(L)  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LC(N)  &kp LC(M)  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans             &trans     &trans     &trans     &trans     &trans
            >;
        };

        l_half_ctrl {
            bindings = <
&trans  &trans     &trans     &trans     &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        l_half_alt {
            bindings = <
&trans  &trans     &trans     &trans     &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(Q)  &kp LA(W)  &kp LA(E)  &kp LA(R)  &kp LA(T)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(A)  &kp LA(S)  &kp LA(D)  &kp LA(F)  &kp LA(G)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(Z)  &kp LA(X)  &kp LA(C)  &kp LA(V)  &kp LA(B)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        r_half_alt {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LA(Y)  &kp LA(U)  &kp LA(I)  &kp LA(O)  &kp LA(P)  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LA(H)  &kp LA(J)  &kp LA(K)  &kp LA(L)  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LA(N)  &kp LA(M)  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans             &trans     &trans     &trans     &trans     &trans
            >;
        };
    };
};
